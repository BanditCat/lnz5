name: lens
version: 4.12.3
id: lens-4.12.3-7f85702ab3e7c5696a4bccce185f0d28
key: lens_0Ln29EcKQP3A6VlPq96tSg
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
    System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
    Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: C:\root\home\Bandit\lnz5\.cabal-sandbox\x86_64-windows-ghc-7.10.2\lens-4.12.3-0Ln29EcKQP3A6VlPq96tSg
library-dirs: C:\root\home\Bandit\lnz5\.cabal-sandbox\x86_64-windows-ghc-7.10.2\lens-4.12.3-0Ln29EcKQP3A6VlPq96tSg
data-dir: C:\root\home\Bandit\lnz5\.cabal-sandbox\x86_64-windows-ghc-7.10.2\lens-4.12.3
hs-libraries: HSlens-4.12.3-0Ln29EcKQP3A6VlPq96tSg
depends:
    array-0.5.1.0-169ce6142b237538ff71848342403adf
    base-4.8.1.0-5e8cb96faebe2db97f24c6e11c6070d6
    base-orphans-0.4.1-61f87fbe40b70a96b4f01742198bd89e
    bifunctors-5-6d139b14898c650d2c021ce6f474feee
    bytestring-0.10.6.0-e962539fa73878c53cfd606fc18d1ab5
    comonad-4.2.7.2-38ac8d719140406fd77d6ff43792a8c0
    containers-0.5.6.2-e8a03fb45246a69f638da309f0336fa3
    contravariant-1.3.2-3b3cc36d7ced39ba29966e11fe60e3f9
    distributive-0.4.4-68fc1e74b869be75f2b90b36b779d0f3
    exceptions-0.8.0.2-195d5c5916b8e54cc6fa413486086ae0
    filepath-1.4.0.0-d243f68f95fb22f89681ef2bcd3a2ccd
    free-4.12.1-0d2692226e77ab4e7dfdeb15adfd1f4d
    ghc-prim-0.4.0.0-e59f0439fd9b762d6ef8e2863f9993df
    hashable-1.2.3.3-03119d57f651aa3d42154fb4a6911bec
    kan-extensions-4.2.2-02243da2b67dd2a915b040f9ece709d6
    mtl-2.2.1-e69cb1de5ad1fa6f3cee1a8785c72610
    parallel-3.2.0.6-2b90a2da620440d5b06e2c1dbe82ce8a
    profunctors-5.1.1-644de81327bb15a2c791f543713d0d75
    reflection-2-e399a859a760dc2259b0c5f750f24454
    semigroupoids-5.0.0.2-008218a22ff704a3703b9110cc019a47
    semigroups-0.16.2.2-0e122a0fd819d61b1dc44acff0145047
    tagged-0.8.1-8fb7724b78ef88e44ca8950c77a173f6
    template-haskell-2.10.0.0-db6e384d4d6c9b3c27c850a63662b19b
    text-1.2.1.3-4a0c59c29a675bd3382cc76532a20db8
    transformers-0.4.2.0-fc94a62cdea8dc4fe08f06144db05b66
    transformers-compat-0.4.0.4-3ca5cbcec233c17da785d5f27705643c
    unordered-containers-0.2.5.1-f8ad53043eda18d195318a374753761e
    vector-0.10.12.3-3503fc90f907da12d9032c30242f08ea
    void-0.7-3021995fa6172b5fba045ec8d6e7e857
haddock-interfaces: C:\root\home\Bandit\lnz5\.cabal-sandbox\doc\x86_64-windows-ghc-7.10.2\lens-4.12.3\html\lens.haddock
haddock-html: C:\root\home\Bandit\lnz5\.cabal-sandbox\doc\x86_64-windows-ghc-7.10.2\lens-4.12.3\html
